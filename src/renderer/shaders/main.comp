#version 460
layout (local_size_x_id = 0, local_size_y_id = 1, local_size_z = 1) in;

// <--------------------------------Structs----------------------------------->

struct TrianglePos {
  vec3 v[3];
};

struct VertexData {
  vec3 normal;
  float texcoord_u;
  vec3 tangent;
  float texcoord_v;
  vec3 bitangent;
  uint material_index;
};

struct TriangleData {
  VertexData v[3];
};

struct BVHNode {
  vec3 aabb_min;
  uint left_or_begin;
  vec3 aabb_max;
  uint triangle_count;
};

struct Material {
  vec4 base_color_factor;
  int base_color_texture_index;
  float metallic_factor;
  float roughness_factor;
  int metallic_roughness_texture_index;
  float normal_scale;
  int normal_texture_index;
  float occlusion_strength;
  int occlusion_texture_index;
  vec3 emissive_factor;
  int emissive_texture_index;
};

struct Camera {
  vec3 position;
  vec3 pixel_delta_u, pixel_delta_v;
  vec3 corner_pixel_pos;
};

// <------------------------------Descriptors--------------------------------->

layout (set = 0, binding = 0) buffer triangle_pos_ssbo {
  TrianglePos triangle_pos[];
};

layout (set = 0, binding = 1) readonly buffer triangle_data_ssbo {
  TriangleData triangle_data[];
};

layout (set = 0, binding = 2) readonly buffer bvh_ssbo {
  BVHNode bvh_nodes[];
};

layout (set = 0, binding = 3) readonly buffer material_ssbo {
  Material materials[];
};

layout (set = 0, binding = 4) writeonly buffer result_ssbo {
  vec4 result[];
};

layout(constant_id = 2) const uint sampler_size = 1;
layout(binding = 5) uniform sampler2D samplers[sampler_size];

layout (push_constant) uniform constant {
  Camera camera;
  uint image_width, image_height;
  uint seed;
  uint sample_count;
  vec3 bg_color;
};

// <----------------------------------RNG------------------------------------->
// https://nullprogram.com/blog/2018/07/31/
void triple32(inout uint x) {
  x ^= x >> 17;
  x *= 0xed5ad4bbU;
  x ^= x >> 11;
  x *= 0xac4c1b51U;
  x ^= x >> 15;
  x *= 0x31848babU;
  x ^= x >> 14;
}

uint rand_state;
float rand_float() {
  triple32(rand_state);
  return float(rand_state) / float(~0u);
}

// <----------------------------------Ray------------------------------------->
struct Ray {
  vec3 origin;
  vec3 dir;
};

Ray get_ray_through_pixel(const uint x, const uint y) {
  vec3 pixel_center = 
    camera.corner_pixel_pos + 
    (rand_float() - 0.5 + x) * camera.pixel_delta_u +
    (rand_float() - 0.5 + y) * camera.pixel_delta_v;

  Ray ray;
  ray.origin = camera.position;
  ray.dir = normalize(pixel_center - ray.origin);
  return ray;
}

// <-------------------------Ray-AABB-Intersection---------------------------->
const float INFINITY = 1.0 / 0.0;
float ray_aabb_intersect(const Ray ray, const vec3 aabb_min, const vec3 aabb_max) {
  vec3 inv_dir = 1.0 / ray.dir;
  vec3 t_min = inv_dir * (aabb_min - ray.origin);
  vec3 t_max = inv_dir * (aabb_max - ray.origin);
  vec3 t1 = min(t_min, t_max);
  vec3 t2 = max(t_min, t_max);
  float t_near = max(max(t1.x, t1.y), t1.z);
  float t_far  = min(min(t2.x, t2.y), t2.z);
  return t_near <= t_far ? t_near : INFINITY;
}

// <---------------------Ray-Triangle-Intersection---------------------------->
struct Intersection {
  float t;
  float u, v;
  uint triangle_index;
};

void ray_triangle_intersect(
    const Ray ray,
    const uint triangle_index,
    inout Intersection intersection) {

  TrianglePos triangle = triangle_pos[triangle_index];
  vec3 edge1 = triangle.v[1] - triangle.v[0];
  vec3 edge2 = triangle.v[2] - triangle.v[0];
  vec3 ray_cross_edge2 = cross(ray.dir, edge2);
  float det = dot(edge1, ray_cross_edge2);
  const float epsilon = 1e-6;
  if (abs(det) < epsilon) return;

  float inv_det = 1.0 / det;
  vec3 s = ray.origin - triangle.v[0];
  float u = inv_det * dot(s, ray_cross_edge2);
  if (u < 0.0 || u > 1.0) return;

  vec3 s_cross_edge1 = cross(s, edge1);
  float v = inv_det * dot(ray.dir, s_cross_edge1);
  if (v < 0.0 || u + v > 1.0) return;

  float t = inv_det * dot(edge2, s_cross_edge1);
  if (t > epsilon && t < intersection.t) {
    intersection.t = t;
    intersection.u = u;
    intersection.v = v;
    intersection.triangle_index = triangle_index;
  }
}

// <-------------------------Ray-Scene-Intersection--------------------------->
#define STACK_SIZE 64
uint stack[STACK_SIZE];
void ray_scene_intersect(const Ray ray, inout Intersection intersection) {
  uint top = 0;
  stack[top++] = 0;

  while (top != 0) {
    if (top >= STACK_SIZE) return;
    BVHNode node = bvh_nodes[stack[--top]];

    if (node.triangle_count > 0) {
      for (uint i = 0; i < node.triangle_count; ++i) {
        ray_triangle_intersect(ray, node.left_or_begin + i, intersection);
      }
    } else {
      BVHNode left  = bvh_nodes[node.left_or_begin];
      BVHNode right = bvh_nodes[node.left_or_begin + 1];
      float dist_left = ray_aabb_intersect(ray, left.aabb_min, left.aabb_max);
      float dist_right = ray_aabb_intersect(ray, right.aabb_min, right.aabb_max);
      
      if (dist_left < dist_right) {
        if (!isinf(dist_right)) stack[top++] = node.left_or_begin + 1;
        if (!isinf(dist_left )) stack[top++] = node.left_or_begin;
      } else {
        if (!isinf(dist_left )) stack[top++] = node.left_or_begin;
        if (!isinf(dist_right)) stack[top++] = node.left_or_begin + 1;
      }
    }
  }
}

// <-------------------------------Ray-color---------------------------------->
const float gamma = 2.2;
vec3 get_ray_color(const Ray ray) {
  vec3 color = bg_color;

  Intersection intersection;
  intersection.t = INFINITY;
  ray_scene_intersect(ray, intersection);

  if (!isinf(intersection.t)) {
    TriangleData triangle = triangle_data[intersection.triangle_index];
    float u = intersection.u;
    float v = intersection.v;
    float w = 1.0 - u - v;

    vec2 texcoords[3];
    for (int i = 0; i < 3; ++i) {
      texcoords[i] = vec2(triangle.v[i].texcoord_u, triangle.v[i].texcoord_v);
    }
    vec2 texcoord = w * texcoords[0] + u * texcoords[1] + v * texcoords[2];

    Material material = materials[triangle.v[0].material_index];
    vec4 base_color = texture(samplers[material.base_color_texture_index], texcoord);
    base_color.rgb = pow(base_color.rgb, vec3(gamma));
    color = base_color.rgb;
  }

  return color;
}

// <---------------------------------Main------------------------------------->
void main() {
  uint id_x = gl_GlobalInvocationID.y;
  uint id_y = gl_GlobalInvocationID.x;
  if (id_x >= image_width || id_y >= image_height) return;

  uint index = id_y * image_width + id_x;
  rand_state = index ^ seed;

  vec3 color = vec3(0.0);
  for (uint i = 0; i < sample_count; ++i) {
    Ray ray = get_ray_through_pixel(id_x, id_y);
    color += get_ray_color(ray);
  }
  color /= sample_count;

  color.rgb = pow(color.rgb, vec3(1.0 / gamma));

  result[index] = vec4(color, 1.0f);
}